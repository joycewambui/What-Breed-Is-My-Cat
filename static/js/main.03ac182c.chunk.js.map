{"version":3,"sources":["components/Logo/cat.png","components/CatRecognition/CatRecognition.js","components/ImageLinkForm/ImageLinkForm.js","components/Logo/Logo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Cat","state","isClicked","_onClick","alert","_this","props","name","setState","react_default","a","createElement","onClick","this","isClickable","console","log","className","value","React","Component","CatRecognition","imageUrl","src","alt","width","height","results","map","cat","CatRecognition_Cat","key","id","PureComponent","ImageLinkForm","_ref","onInputChange","onButtonSubmit","type","onChange","Logo","tilt_default","options","max","style","paddingTop","app","Clarifai","App","apiKey","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","input","target","self","assertThisInitialized","models","predict","then","response","err","components_Logo_Logo","components_ImageLinkForm_ImageLinkForm","components_CatRecognition_CatRecognition","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03ac182c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.8092386d.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Cat extends React.Component {\n  state = {\n    isClicked: false\n  }\n  _onClick = () => {\n    alert(\"Clicked \" + this.props.name);\n    this.setState({\n      isClicked: true\n    })\n  }\n  render(){\n    return(\n      <p onClick={this.props.isClickable ? this._onClick : ()=>{\n        console.log(\"Sorry not clickable\");\n      }} \n      className={this.state.isClicked ? \"bold\" : \"\"}>\n        Breed -- {this.props.name} --\n        Probability {this.props.value}\n      </p>\n    )\n  }\n}\n\nCat.propTypes = {\n  isClickable: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired\n}\n\nclass CatRecognition extends React.PureComponent {\n  render() {\n    return(\n      <div className = 'center ma'>\n      <div className =\"absolute mt2\">\n      {\n        this.props.imageUrl \n        ? <img src={this.props.imageUrl} alt=\"cats\" width='500px' height='auto'/>\n        : <p>Please insert an image url</p>\n      }\n       <div className=\"ph3 mt4\">\n       {\n         this.props.results.map(function(cat){\n           return <Cat name={cat.name} value={cat.value} key={cat.id} isClickable={false} />\n         })\n       }\n       </div>\n       </div>\n      </div>\n    \n        )\n  }\n}\n\nCatRecognition.propTypes = {\n  results: PropTypes.array.isRequired,\n  imageUrl: PropTypes.string\n}\n\nexport default CatRecognition;","import React from 'react';\n\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) =>{\n    return(\n      <div>\n      <p className='f3 center'>\n        {'What Breed Is My Cat?'}\n      </p>\n      <div className='center'>\n        <div className='form center pa4 br3 shadow-5'>\n          <input className='f4 pa2 w-70 center' type='tex' onChange={onInputChange}/>\n          <button\n            className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple' onClick ={onButtonSubmit}>Detect</button>\n        </div>\n      </div>\n    </div>\n      \n  );\n    \n\n}\n\nexport default ImageLinkForm;","import React from 'react';\nimport Tilt from 'react-tilt';\nimport cat from './cat.png';\nimport './Logo.css';\n\nconst Logo = () => {\n  return (\n    <div className='ma4 mt0'>\n      <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 55 }} style={{ height: 150, width: 150 }} >\n        <div className=\"Tilt-inner pa3 logo\">\n          \n          <img style={{paddingTop: '5px'}} alt='logo' src={cat}/>\n        </div>\n      </Tilt>\n    </div>\n  );\n}\n\nexport default Logo;","import React, { Component } from 'react';\nimport CatRecognition from './components/CatRecognition/CatRecognition';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Logo from './components/Logo/Logo';\nimport Clarifai from 'clarifai';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: '7d5e7412bf3b49ecac7031d13d8fab3b'\n});\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state ={\n      input : '' ,\n      imageUrl:'',\n      results: []\n    }\n  }\n \n onInputChange = (event) => {\n    this.setState({input : event.target.value});\n }\n\n // Clarifai cat breeds model\n\n \nonButtonSubmit = () => {\n  const self = this;\n  app.models.predict(\"Cat Breeds\", this.state.input).then(\n   function(response) {\n\n    var concepts = response['outputs'] [0] ['data'] ['concepts']\n    self.setState({\n      results: response['outputs'] [0] ['data'] ['concepts'],\n      imageUrl: self.state.input\n    });\n    \n   },\n   function(err) {\n     // there was an error\n     console.log(err)\n     \n   });  \n   }\n  \n  render(){\n\n\n    return(\n      <div className=\"centre\">\n        <Logo />\n         <ImageLinkForm \n         onInputChange = {this.onInputChange}\n        onButtonSubmit={this.onButtonSubmit}\n        />\n        <CatRecognition imageUrl={this.state.imageUrl} \n        results={this.state.results}\n        />\n        \n        \n      </div>\n\n    );\n  }\n\n \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render( <App />,\n     document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}